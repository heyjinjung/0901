/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register user (temporary minimal endpoint)
         * @description Lightweight register endpoint added for interim E2E tests.
         *     Uses AuthService.register_with_invite_code if available; falls back to legacy user creation otherwise.
         */
        post: operations["minimal_register_api_auth_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user profile (temporary minimal endpoint) */
        get: operations["minimal_profile_api_auth_profile_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/debug/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Debug Token
         * @description DEV: Return basic info about the provided bearer token (no verification).
         */
        get: operations["debug_token_api_auth_debug_token_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/debug/decode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Debug Decode
         * @description DEV: Decode JWT header/payload without signature verification for debugging.
         */
        get: operations["debug_decode_api_auth_debug_decode_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/debug/sig": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Debug Signature
         * @description DEV: Verify HS256 signature manually using current SECRET_KEY.
         */
        get: operations["debug_signature_api_auth_debug_sig_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/debug/make": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Debug Make Token
         * @description DEV: Create a token for the first user and return it along with secret length.
         */
        get: operations["debug_make_token_api_auth_debug_make_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/debug/sig-guess": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Debug Signature Guess
         * @description DEV: Try signature verification with multiple candidate secrets to find a match.
         */
        get: operations["debug_signature_guess_api_auth_debug_sig_guess_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/debug/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Debug Verify
         * @description DEV: Attempt full verify_token and return result or error details.
         */
        get: operations["debug_verify_api_auth_debug_verify_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Signup */
        post: operations["signup_api_auth_signup_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login */
        post: operations["login_api_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/admin/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Login */
        post: operations["admin_login_api_auth_admin_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh */
        post: operations["refresh_api_auth_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout */
        post: operations["logout_api_auth_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout-all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout All */
        post: operations["logout_all_api_auth_logout_all_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Me
         * @description Alias to current user profile for clients expecting /api/auth/me.
         */
        get: operations["me_api_auth_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Profile
         * @description 현재 로그인한 사용자 프로필 조회
         */
        get: operations["get_profile_api_users_profile_get"];
        /**
         * Update User Profile
         * @description Update user profile
         */
        put: operations["update_user_profile_api_users_profile_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Balance
         * @description 사용자 잔액 조회
         */
        get: operations["get_user_balance_api_users_balance_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Info
         * @description 사용자 상세 정보 조회
         */
        get: operations["get_user_info_api_users_info_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Stats
         * @description Get user statistics
         */
        get: operations["get_user_stats_api_users_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/tokens/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Tokens
         * @description Add tokens to user account (admin or special purposes)
         */
        post: operations["add_tokens_api_users_tokens_add_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User
         * @description 특정 사용자 정보 조회 (본인=전체, 타인=제한적 정보)
         */
        get: operations["get_user_api_users__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/email/trigger": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Email Trigger */
        post: operations["admin_email_trigger_api_admin_email_trigger_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Admin List Users */
        get: operations["admin_list_users_api_admin_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Admin User Detail */
        get: operations["admin_user_detail_api_admin_users__user_id__get"];
        /**
         * Admin Update User
         * @description Update core user admin fields (admin only).
         *
         *     This endpoint exists to satisfy tests expecting PUT /api/admin/users/{id}
         *     to control is_admin/is_active/user_rank with proper permission checks.
         */
        put: operations["admin_update_user_api_admin_users__user_id__put"];
        post?: never;
        /** Admin Delete User */
        delete: operations["admin_delete_user_api_admin_users__user_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/elevate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Dev Elevate User
         * @description Dev-only: elevate a user by site_id to admin without auth.
         *
         *     This is used only in tests to enable admin flows.
         */
        post: operations["dev_elevate_user_api_admin_users_elevate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{user_id}/rank": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Admin Update Rank */
        put: operations["admin_update_rank_api_admin_users__user_id__rank_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{user_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Admin Update Status */
        put: operations["admin_update_status_api_admin_users__user_id__status_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{user_id}/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Admin User Logs */
        get: operations["admin_user_logs_api_admin_users__user_id__logs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/audit/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Audit Logs */
        get: operations["list_audit_logs_api_admin_audit_logs_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/audit/logs.csv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Export Audit Logs Csv */
        get: operations["export_audit_logs_csv_api_admin_audit_logs_csv_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/shop/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Admin List Items */
        get: operations["admin_list_items_api_admin_shop_items_get"];
        put?: never;
        /** Admin Create Item */
        post: operations["admin_create_item_api_admin_shop_items_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/shop/items/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Admin Update Item */
        put: operations["admin_update_item_api_admin_shop_items__item_id__put"];
        post?: never;
        /** Admin Delete Item */
        delete: operations["admin_delete_item_api_admin_shop_items__item_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/shop/items/{item_id}/discount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Admin Set Discount */
        patch: operations["admin_set_discount_api_admin_shop_items__item_id__discount_patch"];
        trace?: never;
    };
    "/api/admin/shop/items/{item_id}/rank": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Admin Set Rank */
        patch: operations["admin_set_rank_api_admin_shop_items__item_id__rank_patch"];
        trace?: never;
    };
    "/api/admin/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Admin Stats
         * @description 확장 관리자 통계 반환 (Redis 5s 캐시).
         *
         *     캐시 키: admin:stats:cache:v1
         *     실패 시 안전하게 빈 기본값 반환.
         */
        get: operations["get_admin_stats_api_admin_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{user_id}/ban": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Ban User
         * @description Ban a user
         */
        post: operations["ban_user_api_admin_users__user_id__ban_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{user_id}/unban": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unban User
         * @description Unban a user
         */
        post: operations["unban_user_api_admin_users__user_id__unban_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{user_id}/tokens/add": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add User Tokens
         * @description Add tokens to a user account (admin only).
         *     - 호환성: JSON 본문({amount, reason}) 또는 쿼리 파라미터 amount 모두 지원
         */
        post: operations["add_user_tokens_api_admin_users__user_id__tokens_add_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/limited/toggle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Limited Toggle */
        post: operations["admin_limited_toggle_api_admin_limited_toggle_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/gacha/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Update Gacha Config */
        post: operations["admin_update_gacha_config_api_admin_gacha_config_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/campaigns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create Campaign */
        post: operations["create_campaign_api_admin_campaigns_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/campaigns/{campaign_id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel Campaign */
        post: operations["cancel_campaign_api_admin_campaigns__campaign_id__cancel_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Admin List Transactions */
        get: operations["admin_list_transactions_api_admin_transactions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/transactions/{receipt}/force-settle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Force Settle */
        post: operations["admin_force_settle_api_admin_transactions__receipt__force_settle_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/limited-packages/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Limited Upsert */
        post: operations["admin_limited_upsert_api_admin_limited_packages_upsert_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/limited-packages/{package_id}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Limited Disable */
        post: operations["admin_limited_disable_api_admin_limited_packages__package_id__disable_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/promo-codes/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Promo Upsert */
        post: operations["admin_promo_upsert_api_admin_promo_codes_upsert_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/limited/period": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Limited Period */
        post: operations["admin_limited_period_api_admin_limited_period_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/limited/stock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Limited Stock */
        post: operations["admin_limited_stock_api_admin_limited_stock_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/limited/per-user-limit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Limited Per User Limit */
        post: operations["admin_limited_per_user_limit_api_admin_limited_per_user_limit_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/limited/promo/set": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Limited Promo Set */
        post: operations["admin_limited_promo_set_api_admin_limited_promo_set_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/limited/promo/clear": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Limited Promo Clear */
        post: operations["admin_limited_promo_clear_api_admin_limited_promo_clear_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{user_id}/gold/grant": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 관리자 골드 지급 */
        post: operations["admin_grant_gold_api_admin_users__user_id__gold_grant_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/olap/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Olap Health */
        get: operations["olap_health_api_olap_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Log Action */
        post: operations["log_action_api_actions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/actions/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Log Actions Bulk */
        post: operations["log_actions_bulk_api_actions_bulk_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/actions/recent/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Recent Actions */
        get: operations["recent_actions_api_actions_recent__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rewards/users/{user_id}/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Rewards
         * @description Retrieves a paginated list of rewards for a specific user.
         */
        get: operations["get_user_rewards_api_rewards_users__user_id__rewards_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rewards/distribute": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Distribute Reward To User
         * @description Distributes a specific reward to a user.
         *     This is the central endpoint for granting rewards from games or events.
         */
        post: operations["distribute_reward_to_user_api_rewards_distribute_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shop/catalog": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List shop catalog (gold) */
        get: operations["list_catalog_api_shop_catalog_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shop/admin/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List products (soft delete aware) */
        get: operations["admin_list_products_api_shop_admin_products_get"];
        put?: never;
        /** Admin Create Product */
        post: operations["admin_create_product_api_shop_admin_products_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shop/admin/products/{product_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Admin Update Product */
        put: operations["admin_update_product_api_shop_admin_products__product_id__put"];
        post?: never;
        /** Admin Soft Delete Product */
        delete: operations["admin_soft_delete_product_api_shop_admin_products__product_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shop/admin/products/{product_id}/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Restore Product */
        post: operations["admin_restore_product_api_shop_admin_products__product_id__restore_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shop/limited-packages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List active limited packages (gold) */
        get: operations["list_limited_packages_api_shop_limited_packages_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shop/limited/catalog": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List limited packages (compat) */
        get: operations["list_limited_catalog_api_shop_limited_catalog_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shop/limited/buy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Buy limited-time package (compat) */
        post: operations["compat_buy_limited_package_legacy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shop/webhook/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Payment Webhook (Replay & 멱등 보호)
         * @description 결제 프로바이더 웹훅 수신.
         *     보안 계층:
         *       1) HMAC 서명 검증 (X-Signature)
         *       2) 재생(Replay) 방어: X-Timestamp + X-Nonce (서로 결합한 키 Redis SETNX, 시간왜곡 허용 ±300s)
         *       3) 이벤트 멱등: X-Event-Id 헤더 또는 payload.event_id 기준 Redis SETNX (중복시 duplicate 응답)
         *
         *     기대 헤더:
         *       - X-Signature: sha256=<hex>
         *       - X-Timestamp: unix epoch seconds
         *       - X-Nonce: 임의 UUID/난수 문자열
         *       - (선택) X-Event-Id: 공급자 이벤트 고유 ID
         */
        post: operations["payment_webhook_api_shop_webhook_payment_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shop/purchase": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Purchase Item
         * @description Purchase shop item using user's gold tokens
         */
        post: operations["purchase_shop_item_api_shop_purchase_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shop/buy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Buy gold top-up or items */
        post: operations["buy_api_shop_buy_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shop/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List My Transactions */
        get: operations["list_my_transactions_api_shop_transactions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shop/transactions/{receipt}/settle": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Settle My Transaction */
        post: operations["settle_my_transaction_api_shop_transactions__receipt__settle_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/shop/buy-limited": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Buy limited-time package (real money) */
        post: operations["buy_limited_package"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/missions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Missions
         * @description Get the list of active missions and the current user's progress.
         */
        get: operations["get_user_missions_api_missions__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/missions/{mission_id}/claim": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Claim Mission Reward
         * @description Claim the reward for a completed mission.
         */
        post: operations["claim_mission_reward_api_missions__mission_id__claim_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/main": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Main Dashboard
         * @description Get main dashboard statistics.
         */
        get: operations["get_main_dashboard_api_dashboard_main_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/games": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Games Dashboard
         * @description Get game-specific dashboard statistics.
         */
        get: operations["get_games_dashboard_api_dashboard_games_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/social-proof": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Social Proof
         * @description Get statistics for social proof widgets.
         *     This endpoint is not protected by admin auth to be publicly available.
         */
        get: operations["get_social_proof_api_dashboard_social_proof_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Unified dashboard aggregate
         * @description 통합 대시보드 집계 엔드포인트
         *
         *     기존 개별 엔드포인트(/dashboard/main, /dashboard/games, /dashboard/social-proof)를 한 번에 호출해
         *     프론트 초기 로딩 RTT를 줄이고 일관된 스냅샷을 제공한다.
         *
         *     Response 예시:
         *     {
         *       "main": {...},
         *       "games": {...},
         *       "social_proof": {...},
         *       "_meta": {"generated_at": "2025-08-21T12:34:56Z"}
         *     }
         */
        get: operations["get_unified_dashboard_api_dashboard_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/streak/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Status */
        get: operations["status_api_streak_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/streak/tick": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Tick */
        post: operations["tick_api_streak_tick_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/streak/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset */
        post: operations["reset_api_streak_reset_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/streak/next-reward": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Next Reward */
        get: operations["next_reward_api_streak_next_reward_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/streak/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** History */
        get: operations["history_api_streak_history_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/streak/protection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Protection Status */
        get: operations["protection_status_api_streak_protection_get"];
        put?: never;
        /** Set Protection */
        post: operations["set_protection_api_streak_protection_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/streak/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Preview
         * @description 현재 streak 및 오늘/내일 보상 금액 미리보기 제공.
         *
         *     프론트는 이 엔드포인트를 사용해 클라이언트 산식 중복 제거.
         *     - streak_count: Redis 카운터 (증가 없이 조회)
         *     - claimed_today: 동일 UTC day idempotency key 존재 여부
         *     - claimable: streak_count>0 이고 claimed_today False
         *     - today_reward: streak_count 기반 산식
         *     - next_day_reward: streak_count+1 기반 산식
         */
        get: operations["preview_api_streak_preview_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/streak/claim": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Claim */
        post: operations["claim_api_streak_claim_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vip/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Vip Status */
        get: operations["vip_status_api_vip_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vip/claim": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Claim Vip Daily */
        post: operations["claim_vip_daily_api_vip_claim_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notification/settings/anon": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Notification Settings Anon
         * @description Return default notification settings; include user_id when available.
         *
         *     This endpoint intentionally allows anonymous requests and will not trigger
         *     the global HTTPBearer auto_error behavior.
         */
        get: operations["get_notification_settings_anon_api_notification_settings_anon_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/content/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Events */
        get: operations["list_events_api_admin_content_events_get"];
        put?: never;
        /** Create Event */
        post: operations["create_event_api_admin_content_events_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/content/events/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Event */
        get: operations["get_event_api_admin_content_events__event_id__get"];
        /** Update Event */
        put: operations["update_event_api_admin_content_events__event_id__put"];
        post?: never;
        /** Delete Event */
        delete: operations["delete_event_api_admin_content_events__event_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/content/events/{event_id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Activate Event */
        post: operations["activate_event_api_admin_content_events__event_id__activate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/content/events/{event_id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Deactivate Event */
        post: operations["deactivate_event_api_admin_content_events__event_id__deactivate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/content/missions/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Mission Templates */
        get: operations["list_mission_templates_api_admin_content_missions_templates_get"];
        put?: never;
        /** Create Mission Template */
        post: operations["create_mission_template_api_admin_content_missions_templates_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/content/missions/templates/{template_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Mission Template */
        put: operations["update_mission_template_api_admin_content_missions_templates__template_id__put"];
        post?: never;
        /** Delete Mission Template */
        delete: operations["delete_mission_template_api_admin_content_missions_templates__template_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/content/rewards/catalog": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Reward Catalog */
        get: operations["list_reward_catalog_api_admin_content_rewards_catalog_get"];
        put?: never;
        /** Create Reward Catalog */
        post: operations["create_reward_catalog_api_admin_content_rewards_catalog_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/content/rewards/catalog/{reward_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Reward Catalog */
        put: operations["update_reward_catalog_api_admin_content_rewards_catalog__reward_id__put"];
        post?: never;
        /** Delete Reward Catalog */
        delete: operations["delete_reward_catalog_api_admin_content_rewards_catalog__reward_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/content/rewards/catalog/{reward_id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Activate Reward */
        post: operations["activate_reward_api_admin_content_rewards_catalog__reward_id__activate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/content/rewards/catalog/{reward_id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Deactivate Reward */
        post: operations["deactivate_reward_api_admin_content_rewards_catalog__reward_id__deactivate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/content/rewards/audit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Reward Audit */
        get: operations["reward_audit_api_admin_content_rewards_audit_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/events/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Events */
        get: operations["list_events_api_admin_events__get"];
        put?: never;
        /** Create Event */
        post: operations["create_event_api_admin_events__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/events/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update Event */
        put: operations["update_event_api_admin_events__event_id__put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/events/{event_id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Deactivate Event */
        post: operations["deactivate_event_api_admin_events__event_id__deactivate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/events/{event_id}/participations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Participations */
        get: operations["list_participations_api_admin_events__event_id__participations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/events/{event_id}/force-claim/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Force Claim */
        post: operations["force_claim_api_admin_events__event_id__force_claim__user_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/events/seed/model-index": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Seed Model Index Event */
        post: operations["seed_model_index_event_api_admin_events_seed_model_index_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/doc-titles/docs/titles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Docs Titles
         * @description Return document names and their H1-H3 titles from the docs folder.
         */
        get: operations["get_docs_titles_api_doc_titles_docs_titles_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feedback/emotion_based": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Personalized Emotion-Based Feedback */
        post: operations["get_emotion_based_feedback_endpoint_feedback_emotion_based_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feedback/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Feedback
         * @description Generate emotion-based feedback for user
         *
         *     Args:
         *         request: Feedback request data
         *             - user_id: User ID
         *             - emotion: Emotion state
         *             - segment: User segment
         *             - context: Additional context information
         *
         *     Returns:
         *         Feedback response object
         */
        post: operations["generate_feedback_feedback_generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/achievements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Achievements */
        get: operations["list_achievements_api_games_achievements_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/achievements/my": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** My Achievements */
        get: operations["my_achievements_api_games_achievements_my_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/stats/basic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Basic Stats */
        get: operations["get_basic_stats_api_games_stats_basic_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/session/start": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start Game Session */
        post: operations["start_game_session_api_games_session_start_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/stats/recalculate/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Recalc User Game Stats
         * @description Recalculate authoritative aggregated stats for a user (crash only MVP).
         */
        post: operations["recalc_user_game_stats_api_games_stats_recalculate__user_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/session/end": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** End Game Session */
        post: operations["end_game_session_api_games_session_end_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/session/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Active Session */
        get: operations["get_active_session_api_games_session_active_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/gacha/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Gacha Config */
        get: operations["get_gacha_config_api_games_gacha_config_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/gacha/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Gacha Stats */
        get: operations["get_gacha_stats_api_games_gacha_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Games List
         * @description 게임 목록 조회 (직접 JSON 반환)
         */
        get: operations["get_games_list_api_games__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/slot/spin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Spin Slot
         * @description 슬롯머신 스핀
         */
        post: operations["spin_slot_api_games_slot_spin_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/rps/play": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Play Rps
         * @description 가위바위보 플레이
         */
        post: operations["play_rps_api_games_rps_play_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/gacha/pull": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Pull Gacha
         * @description 가챠 뽑기 (서비스 레이어 위임: 피티, 근접실패, 10연 할인 적용)
         */
        post: operations["pull_gacha_api_games_gacha_pull_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/crash/bet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Place Crash Bet
         * @description 크래시 게임 베팅 (단일 요청 내 시뮬레이션)
         *     개선 사항:
         *     - 사용자 잔액 차감/승리 가산 단일 트랜잭션 처리
         *     - 동시 중복 제출 방지용 행 잠금(SELECT ... FOR UPDATE) 기반 멱등 (초간단)
         *     - broadcast 에 status 추가 (placed|auto_cashed)
         *     - potential_win 과 별도로 simulated_max_win 제공 (auto_cashout 미지정 시 혼동 제거)
         */
        post: operations["place_crash_bet_api_games_crash_bet_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/stats/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Game Stats
         * @description 사용자 전체 게임 통계 (슬롯/룰렛/가챠 등)
         */
        get: operations["get_game_stats_api_games_stats__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/stats/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get My Authoritative Game Stats
         * @description 현재 로그인 사용자에 대한 서버 권위 Crash GameStats.
         *
         *     user_game_stats 테이블 row 없으면 생성 후 반환. (MVP: crash 전용)
         *     TODO: 멀티 게임 타입 확장 시 game_type 파라미터 도입.
         */
        get: operations["get_my_authoritative_game_stats_api_games_stats_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/profile/{user_id}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Profile Game Stats
         * @description 프로필용 상세 게임 통계
         */
        get: operations["get_profile_game_stats_api_games_profile__user_id__stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/leaderboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Game Leaderboard
         * @description 게임별 또는 전체 리더보드
         */
        get: operations["get_game_leaderboard_api_games_leaderboard_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/achievements/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get User Achievements
         * @description 사용자 업적 목록 (기본 예시)
         */
        get: operations["get_user_achievements_api_games_achievements__user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Game History
         * @description 현재 사용자 GameHistory 조회
         *
         *     필터:
         *       - game_type, action_type (정확 일치)
         *       - since (ISO8601 문자열) 이후
         *     페이지네이션:
         *       - limit / offset
         *     정렬: 최신(created_at desc)
         */
        get: operations["get_game_history_api_games_history_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/{game_type}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Game Type Stats */
        get: operations["get_game_type_stats_api_games__game_type__stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/profile/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Profile Stats */
        get: operations["get_profile_stats_api_games_profile_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/follow/{target_user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Follow User */
        post: operations["follow_user_api_games_follow__target_user_id__post"];
        /** Unfollow User */
        delete: operations["unfollow_user_api_games_follow__target_user_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/follow/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Following */
        get: operations["list_following_api_games_follow_list_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/follow/followers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Followers */
        get: operations["list_followers_api_games_follow_followers_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invite/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Invite Code
         * @description Generate a new invite code
         *     Only admin users can generate invite codes
         */
        post: operations["create_invite_code_api_invite_generate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invite/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Invite Code
         * @description Validate an invite code
         *     Returns validation status and code details
         */
        post: operations["validate_invite_code_api_invite_validate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invite/codes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Invite Codes
         * @description List all invite codes created by the current user
         *     Admin users can see all codes
         */
        get: operations["list_invite_codes_api_invite_codes_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/invite/codes/{code}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Deactivate Invite Code
         * @description Deactivate an invite code
         *     Only the creator or admin can deactivate
         */
        patch: operations["deactivate_invite_code_api_invite_codes__code__deactivate_patch"];
        trace?: never;
    };
    "/api/invite/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Invite Stats
         * @description Get invite code statistics
         *     Shows usage metrics for the current user's codes
         */
        get: operations["get_invite_stats_api_invite_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rbac/premium": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Premium Only */
        get: operations["premium_only_api_rbac_premium_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rbac/vip": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Vip Only */
        get: operations["vip_only_api_rbac_vip_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics/global": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 글로벌 플랫폼 메트릭 조회 */
        get: operations["get_global_metrics_api_metrics_global_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/metrics/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 글로벌 메트릭 SSE 스트림
         * @description Server-Sent Events (text/event-stream)
         *
         *     - interval: seconds between emissions (min 2 / max 30 enforced)
         *     - event: "metrics"
         */
        get: operations["stream_global_metrics_api_metrics_stream_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Active Events
         * @description 활성 이벤트 목록 조회
         */
        get: operations["events_list_active"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/admin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Create Event */
        post: operations["events_admin_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/admin/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Admin List Events */
        get: operations["events_admin_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/admin/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Admin Update Event */
        put: operations["events_admin_update"];
        post?: never;
        /** Admin Soft Delete Event */
        delete: operations["events_admin_soft_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/admin/{event_id}/restore": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Admin Restore Event */
        post: operations["events_admin_restore"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Event Detail
         * @description 이벤트 상세 조회
         */
        get: operations["events_get_detail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Join Event
         * @description 이벤트 참여
         */
        post: operations["events_join"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/progress/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Event Progress
         * @description 이벤트 진행 상황 업데이트
         */
        put: operations["events_progress_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/claim/{event_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Claim Event Rewards
         * @description 이벤트 보상 수령
         */
        post: operations["events_claim"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/missions/daily": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Daily Missions
         * @description 일일 미션 목록 조회
         */
        get: operations["missions_list_daily"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/missions/weekly": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Weekly Missions
         * @description 주간 미션 목록 조회
         */
        get: operations["missions_list_weekly"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/missions/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Missions
         * @description 모든 미션 목록 조회
         */
        get: operations["missions_list_all"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/missions/progress": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Mission Progress
         * @description 미션 진행 상황 업데이트
         */
        put: operations["missions_progress_update"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/missions/claim/{mission_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Claim Mission Rewards
         * @description 미션 보상 수령
         */
        post: operations["missions_claim"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/realtime/test/broadcast": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test Broadcast
         * @description 테스트용 브로드캐스트 (관리자만)
         */
        get: operations["test_broadcast_api_realtime_test_broadcast_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Root endpoint
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/kafka/_debug/last": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Kafka Last Messages
         * @description Return last consumed Kafka messages (debug).
         */
        get: operations["kafka_last_messages_api_kafka__debug_last_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/kafka/_debug/ready": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Kafka Ready
         * @description Return whether the Kafka consumer is initialized and assigned partitions.
         */
        get: operations["kafka_ready_api_kafka__debug_ready_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Api Info
         * @description API information endpoint
         */
        get: operations["api_info_api_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Achievement
         * @description 사용자 업적
         */
        Achievement: {
            /** Id */
            id: number;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Badge Icon */
            badge_icon: string;
            /** Badge Color */
            badge_color: string;
            /** Achieved At */
            achieved_at?: string | null;
            /** Progress */
            progress?: number | null;
        };
        /** AchievementProgressItem */
        AchievementProgressItem: {
            /** Code */
            code: string;
            /** Title */
            title: string;
            /** Description */
            description: string | null;
            /** Icon */
            icon: string | null;
            /** Badge Color */
            badge_color: string | null;
            /** Reward Coins */
            reward_coins: number;
            /** Reward Gold */
            reward_gold: number;
            /** Progress */
            progress: number;
            /** Threshold */
            threshold: number | null;
            /** Unlocked */
            unlocked: boolean;
        };
        /** AchievementProgressResponse */
        AchievementProgressResponse: {
            /** Items */
            items: components["schemas"]["AchievementProgressItem"][];
        };
        /** ActionCreate */
        ActionCreate: {
            /** User Id */
            user_id: number;
            /**
             * Action Type
             * @example SLOT_SPIN
             * @example GACHA_SPIN
             * @example LOGIN
             * @example REWARD_GRANT
             */
            action_type: string;
            /** Context */
            context?: Record<string, never> | null;
            /** Client Ts */
            client_ts?: string | null;
        };
        /** ActionItem */
        ActionItem: {
            /** Id */
            id: number;
            /** Action Type */
            action_type: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Action Data */
            action_data: Record<string, never>;
        };
        /** ActionLoggedResponse */
        ActionLoggedResponse: {
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            /** Action Type */
            action_type: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** AdminAddTokensRequest */
        AdminAddTokensRequest: {
            /** Amount */
            amount: number;
            /** Reason */
            reason?: string | null;
            /** User Id */
            user_id?: number | null;
        };
        /** AdminCatalogItemIn */
        AdminCatalogItemIn: {
            /**
             * Id
             * @description Product ID
             */
            id: number;
            /** Sku */
            sku: string;
            /** Name */
            name: string;
            /** Price Cents */
            price_cents: number;
            /**
             * Gold
             * @description Amount of gold granted (legacy alias: gems)
             */
            gold: number;
            /**
             * Discount Percent
             * @default 0
             */
            discount_percent: number;
            /** Discount Ends At */
            discount_ends_at?: string | null;
            /** Min Rank */
            min_rank?: string | null;
        };
        /** AdminCatalogItemOut */
        AdminCatalogItemOut: {
            /** Id */
            id: number;
            /** Sku */
            sku: string;
            /** Name */
            name: string;
            /** Price Cents */
            price_cents: number;
            /**
             * Gold
             * @description Amount of gold granted
             */
            gold: number;
            /**
             * Gems
             * @description DEPRECATED: alias of gold - will be removed
             */
            gems?: number | null;
            /**
             * Discount Percent
             * @default 0
             */
            discount_percent: number;
            /** Discount Ends At */
            discount_ends_at?: string | null;
            /** Min Rank */
            min_rank?: string | null;
        };
        /** AdminDiscountPatch */
        AdminDiscountPatch: {
            /** Discount Percent */
            discount_percent: number;
            /** Discount Ends At */
            discount_ends_at?: string | null;
        };
        /**
         * AdminEmailTriggerRequest
         * @description 관리자 전용 템플릿 이메일 발송 트리거
         *
         *     - 대상 단일 계정: user_id 또는 site_id 지정
         *     - 대상 세그먼트: segment 지정 (UserSegment.rfm_group 라벨)
         *     - template: email_templates.py에 정의된 키 (welcome|reward|event 등)
         *     - context: 템플릿 렌더링에 사용될 추가 값 (부족하면 서버에서 기본값 보충)
         */
        AdminEmailTriggerRequest: {
            /** Template */
            template: string;
            /** User Id */
            user_id?: number | null;
            /** Site Id */
            site_id?: string | null;
            /** Segment */
            segment?: string | null;
            /** Context */
            context?: Record<string, never> | null;
        };
        /** AdminLogResponse */
        AdminLogResponse: {
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            /** Action Type */
            action_type: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Details */
            details?: string | null;
        };
        /**
         * AdminLogin
         * @description 관리자 로그인 스키마
         * @example {
         *       "password": "admin123",
         *       "site_id": "admin"
         *     }
         */
        AdminLogin: {
            /**
             * Site Id
             * @description 관리자 사이트 아이디
             */
            site_id: string;
            /**
             * Password
             * @description 관리자 비밀번호
             */
            password: string;
        };
        /** AdminRankPatch */
        AdminRankPatch: {
            /** Min Rank */
            min_rank?: string | null;
        };
        /**
         * AdminStatsResponse
         * @description Admin statistics response (확장)
         *
         *     필드 설명:
         *         - total_users: 전체 가입 사용자 수
         *         - active_users: is_active = true 사용자 수
         *         - total_games_played: UserAction 총 레코드 수 (임시 지표)
         *         - total_tokens_in_circulation: users.cyber_token_balance 총합
         *         - online_users: 최근 5분 내 활동 세션 사용자 수
         *         - total_revenue: 누적 성공 거래 금액 (amount 단위 그대로)
         *         - today_revenue: 금일 00:00 이후 성공 거래 금액
         *         - critical_alerts: 최근 10분 내 주요 경보성 action 카운트
         *         - pending_actions: pending 상태 거래 수
         *         - generated_at: 서버 생성 시각 ISO8601
         */
        AdminStatsResponse: {
            /** Total Users */
            total_users: number;
            /** Active Users */
            active_users: number;
            /** Total Games Played */
            total_games_played: number;
            /** Total Tokens In Circulation */
            total_tokens_in_circulation: number;
            /**
             * Online Users
             * @default 0
             */
            online_users: number;
            /**
             * Total Revenue
             * @default 0
             */
            total_revenue: number;
            /**
             * Today Revenue
             * @default 0
             */
            today_revenue: number;
            /**
             * Critical Alerts
             * @default 0
             */
            critical_alerts: number;
            /**
             * Pending Actions
             * @default 0
             */
            pending_actions: number;
            /** Generated At */
            generated_at?: string | null;
        };
        /**
         * AdminUserUpdateRequest
         * @description Generic admin user update request.
         *
         *     Allows toggling is_admin, is_active and updating user_rank in one call.
         */
        AdminUserUpdateRequest: {
            /** Is Admin */
            is_admin?: boolean | null;
            /** Is Active */
            is_active?: boolean | null;
            /** User Rank */
            user_rank?: string | null;
        };
        /** AttendanceHistory */
        AttendanceHistory: {
            /** Action Type */
            action_type: string;
            /** Year */
            year: number;
            /** Month */
            month: number;
            /** Days */
            days: string[];
        };
        /** Body_refresh_api_auth_refresh_post */
        Body_refresh_api_auth_refresh_post: {
            /** Refresh Token */
            refresh_token?: string | null;
        };
        /** BulkActions */
        BulkActions: {
            /** Items */
            items: components["schemas"]["ActionCreate"][];
        };
        /** BuyReceipt */
        BuyReceipt: {
            /** Success */
            success: boolean;
            /** Message */
            message: string;
            /** User Id */
            user_id: number;
            /** Product Id */
            product_id: string;
            /** Quantity */
            quantity: number;
            /** Gold Granted */
            gold_granted?: number | null;
            /** Gold Spent */
            gold_spent?: number | null;
            /** New Gold Balance */
            new_gold_balance?: number | null;
            /** Charge Id */
            charge_id?: string | null;
            /** Receipt Code */
            receipt_code?: string | null;
            /** Item Id */
            item_id?: string | null;
            /** Item Name */
            item_name?: string | null;
            /** Reason Code */
            reason_code?: string | null;
        };
        /** BuyRequest */
        BuyRequest: {
            /** User Id */
            user_id: number;
            /**
             * Product Id
             * @description Catalog product id or item code
             */
            product_id: string;
            /**
             * Amount
             * @description Amount in cents or tokens depending on kind
             */
            amount?: number | null;
            /**
             * Quantity
             * @default 1
             */
            quantity: number;
            /**
             * Kind
             * @default gold
             * @enum {string}
             */
            kind: "gold" | "item";
            /**
             * Payment Method
             * @description card|tokens etc
             */
            payment_method?: string | null;
            /** Item Name */
            item_name?: string | null;
            /**
             * Currency
             * @default USD
             */
            currency: string;
            /** Card Token */
            card_token?: string | null;
            /**
             * Idempotency Key
             * @description Client-provided idempotency key (unique per purchase attempt)
             */
            idempotency_key?: string | null;
        };
        /** CampaignCreateRequest */
        CampaignCreateRequest: {
            /** Title */
            title: string;
            /** Message */
            message: string;
            /**
             * Targeting Type
             * @default all
             */
            targeting_type: string;
            /** Target Segment */
            target_segment?: string | null;
            /** User Ids */
            user_ids?: number[] | null;
            /** Scheduled At */
            scheduled_at?: string | null;
        };
        /** CatalogItem */
        CatalogItem: {
            /** Id */
            id: number;
            /** Sku */
            sku: string;
            /** Name */
            name: string;
            /** Price Cents */
            price_cents: number;
            /** Discounted Price Cents */
            discounted_price_cents: number;
            /** Gold */
            gold: number;
            /**
             * Discount Percent
             * @default 0
             */
            discount_percent: number;
            /** Discount Ends At */
            discount_ends_at?: string | null;
            /** Min Rank */
            min_rank?: string | null;
        };
        /** ClaimRequest */
        ClaimRequest: {
            /** Action Type */
            action_type?: string | null;
        };
        /** ClaimRewardResponse */
        ClaimRewardResponse: {
            /** Success */
            success: boolean;
            /** Rewards */
            rewards: Record<string, never>;
            /** Message */
            message: string;
            /** Progress Version */
            progress_version?: number | null;
            /** Reward Items */
            reward_items?: Record<string, never>[] | null;
            /** New Balance */
            new_balance?: number | null;
        };
        /**
         * CrashBetRequest
         * @description 크래시 게임 베팅 요청 모델
         */
        CrashBetRequest: {
            /** Bet Amount */
            bet_amount: number;
            /** Auto Cashout Multiplier */
            auto_cashout_multiplier?: number | null;
        };
        /**
         * CrashBetResponse
         * @description 크래시 게임 베팅 응답 모델
         */
        CrashBetResponse: {
            /** Success */
            success: boolean;
            /** Game Id */
            game_id: string;
            /** Bet Amount */
            bet_amount: number;
            /** Potential Win */
            potential_win: number;
            /** Max Multiplier */
            max_multiplier?: number | null;
            /** Message */
            message: string;
            /** Balance */
            balance: number;
            /**
             * Status
             * @description 베팅 직후 상태 placed|auto_cashed|active 등
             */
            status?: string | null;
            /**
             * Simulated Max Win
             * @description UI 표시용 – 현재 multiplier 기반 가상의 최대 승리금 (auto_cashout 미지정 시 안내)
             */
            simulated_max_win?: number | null;
        };
        /** ElevateRequest */
        ElevateRequest: {
            /** Site Id */
            site_id: string;
        };
        /** EmotionFeedbackRequest */
        EmotionFeedbackRequest: {
            /**
             * Emotion Result Data
             * @description EmotionResult as dict.
             */
            emotion_result_data: Record<string, never>;
            /**
             * User Segment
             * @default GENERAL
             */
            user_segment: string | null;
            /**
             * Mission Type
             * @default GENERAL
             */
            mission_type: string | null;
            /** Context Text */
            context_text?: string | null;
        };
        /** EventAdminCreate */
        EventAdminCreate: {
            /** Title */
            title: string;
            /** Description */
            description?: string | null;
            /** Event Type */
            event_type: string;
            /**
             * Start Date
             * Format: date-time
             */
            start_date: string;
            /**
             * End Date
             * Format: date-time
             */
            end_date: string;
            /** Rewards */
            rewards: Record<string, never>;
            /**
             * Requirements
             * @default {}
             */
            requirements: Record<string, never> | null;
            /** Image Url */
            image_url?: string | null;
            /**
             * Priority
             * @default 0
             */
            priority: number;
        };
        /** EventAdminUpdate */
        EventAdminUpdate: {
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
            /** End Date */
            end_date?: string | null;
            /** Rewards */
            rewards?: Record<string, never> | null;
            /** Is Active */
            is_active?: boolean | null;
        };
        /** EventJoin */
        EventJoin: {
            /** Event Id */
            event_id: number;
        };
        /** EventParticipationResponse */
        EventParticipationResponse: {
            /** Event Id */
            event_id: number;
            /**
             * Progress
             * @default {}
             */
            progress: Record<string, never> | null;
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            /** Completed */
            completed: boolean;
            /** Claimed Rewards */
            claimed_rewards: boolean;
            /**
             * Joined At
             * Format: date-time
             */
            joined_at: string;
            /** Completed At */
            completed_at?: string | null;
            event?: components["schemas"]["app__schemas__event_schemas__EventResponse"] | null;
        };
        /** EventProgressUpdate */
        EventProgressUpdate: {
            /** Progress */
            progress: Record<string, never>;
        };
        /** FeedbackResponse */
        FeedbackResponse: {
            /** Success */
            success: boolean;
            /** Message */
            message: string;
            /** Animation Key */
            animation_key?: string | null;
            /** Sound Key */
            sound_key?: string | null;
            /** Intensity */
            intensity?: number | null;
            /** Color Scheme */
            color_scheme?: string | null;
            /** Bonus Tokens */
            bonus_tokens?: number | null;
            /** Recommendation */
            recommendation?: string | null;
        };
        /** FollowActionResponse */
        FollowActionResponse: {
            /** Success */
            success: boolean;
            /** Following */
            following: boolean;
            /** Target User Id */
            target_user_id: number;
            /** Follower Count */
            follower_count: number;
            /** Following Count */
            following_count: number;
        };
        /** FollowListItem */
        FollowListItem: {
            /** User Id */
            user_id: number;
            /** Nickname */
            nickname: string;
            /**
             * Followed At
             * Format: date-time
             */
            followed_at: string;
        };
        /** FollowListResponse */
        FollowListResponse: {
            /** Total */
            total: number;
            /** Items */
            items: components["schemas"]["FollowListItem"][];
        };
        /** ForceSettleRequest */
        ForceSettleRequest: {
            /**
             * Outcome
             * @default success
             */
            outcome: string;
        };
        /** GachaConfigUpdate */
        GachaConfigUpdate: {
            /** Rarity Table */
            rarity_table?: (number | string)[][] | null;
            /** Reward Pool */
            reward_pool?: {
                [key: string]: number;
            } | null;
        };
        /**
         * GachaPullRequest
         * @description 가챠 뽑기 요청 모델
         * @example {
         *       "pull_count": 10,
         *       "use_premium_currency": false
         *     }
         */
        GachaPullRequest: {
            /** Gacha Id */
            gacha_id?: string | null;
            /**
             * Pull Count
             * @default 1
             */
            pull_count: number;
            /**
             * Use Premium Currency
             * @default false
             */
            use_premium_currency: boolean;
        };
        /**
         * GachaPullResponse
         * @description 가챠 뽑기 응답 모델
         * @example {
         *       "animation_type": "near_miss",
         *       "balance": 12345,
         *       "currency_balance": {
         *         "gems": 0,
         *         "tokens": 11895
         *       },
         *       "items": [
         *         {
         *           "name": "Neon Chip",
         *           "rarity": "common"
         *         },
         *         {
         *           "name": "Cyber Ring",
         *           "rarity": "rare"
         *         },
         *         {
         *           "name": "Blade of Flux",
         *           "rarity": "epic"
         *         }
         *       ],
         *       "message": "Gacha pull completed",
         *       "psychological_message": "거의 다 왔어요! 한 번만 더 도전해보세요!",
         *       "pull_count": 10,
         *       "rare_item_count": 1,
         *       "success": true,
         *       "ultra_rare_item_count": 1
         *     }
         */
        GachaPullResponse: {
            /** Success */
            success: boolean;
            /** Items */
            items: Record<string, never>[];
            /**
             * Rare Item Count
             * @default 0
             */
            rare_item_count: number;
            /**
             * Ultra Rare Item Count
             * @default 0
             */
            ultra_rare_item_count: number;
            /** Pull Count */
            pull_count: number;
            /** Balance */
            balance: number;
            /** Special Animation */
            special_animation?: string | null;
            /**
             * Animation Type
             * @description 애니메이션 타입: normal|epic|legendary|near_miss|pity
             */
            animation_type?: string | null;
            /**
             * Psychological Message
             * @description 즉시 피드백용 메시지
             */
            psychological_message?: string | null;
            /** Message */
            message: string;
            /** Feedback */
            feedback?: Record<string, never> | null;
            /** Currency Balance */
            currency_balance: {
                [key: string]: number;
            };
            /**
             * Net Change
             * @description 토큰 순 변화량 (뽑기 비용 합산 반영)
             */
            net_change?: number | null;
        };
        /** GameBasicStatsItem */
        GameBasicStatsItem: {
            /** Game Type */
            game_type: string;
            /** Total Hands */
            total_hands: number;
            /** Wins */
            wins: number;
            /** Win Rate */
            win_rate: number;
            /** Total Bet */
            total_bet: number;
            /** Total Win */
            total_win: number;
            /** Net */
            net: number;
            /** Roi */
            roi: number;
        };
        /** GameBasicStatsResponse */
        GameBasicStatsResponse: {
            /** Items */
            items: components["schemas"]["GameBasicStatsItem"][];
        };
        /** GameHistoryItem */
        GameHistoryItem: {
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            /** Game Type */
            game_type: string;
            /** Action Type */
            action_type: string;
            /** Delta Coin */
            delta_coin: number;
            /** Delta Gem */
            delta_gem: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Result Meta */
            result_meta?: Record<string, never> | null;
        };
        /** GameHistoryListResponse */
        GameHistoryListResponse: {
            /** Total */
            total: number;
            /** Items */
            items: components["schemas"]["GameHistoryItem"][];
            /** Limit */
            limit: number;
            /** Offset */
            offset: number;
        };
        /**
         * GameLeaderboard
         * @description 게임 리더보드 응답
         */
        GameLeaderboard: {
            /** Game Type */
            game_type: string;
            /** Period */
            period: string;
            /**
             * Entries
             * @default []
             */
            entries: components["schemas"]["LeaderboardEntry"][];
            /** User Rank */
            user_rank?: number | null;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * GameSession
         * @description 게임 세션 모델
         */
        GameSession: {
            /** Session Id */
            session_id: string;
            /** User Id */
            user_id: number;
            /** Game Type */
            game_type: string;
            /**
             * Start Time
             * Format: date-time
             */
            start_time: string;
            /** Duration */
            duration?: number | null;
            /**
             * Current Bet
             * @default 0
             */
            current_bet: number | null;
            /**
             * Current Round
             * @default 0
             */
            current_round: number | null;
            /**
             * Status
             * @default active
             */
            status: string;
        };
        /**
         * GameSessionEnd
         * @description 게임 세션 종료 요청 모델
         */
        GameSessionEnd: {
            /** Session Id */
            session_id: string;
            /** Duration */
            duration: number;
            /**
             * Rounds Played
             * @default 1
             */
            rounds_played: number;
            /**
             * Total Bet
             * @default 0
             */
            total_bet: number;
            /**
             * Total Win
             * @default 0
             */
            total_win: number;
            /** Game Result */
            game_result?: Record<string, never> | null;
        };
        /** GameSessionEndResponse */
        GameSessionEndResponse: {
            /** Session Id */
            session_id: string;
            /** Status */
            status: string;
            /** Duration */
            duration: number | null;
            /** Total Bet */
            total_bet: number;
            /** Total Win */
            total_win: number;
            /** Game Type */
            game_type: string;
            /** Result Data */
            result_data?: Record<string, never> | null;
        };
        /**
         * GameSessionStart
         * @description 게임 세션 시작 요청 모델
         */
        GameSessionStart: {
            /** Game Type */
            game_type: string;
            /**
             * Bet Amount
             * @default 0
             */
            bet_amount: number | null;
            /** Metadata */
            metadata?: Record<string, never> | null;
        };
        /** GameSessionStartResponse */
        GameSessionStartResponse: {
            /** Session Id */
            session_id: string;
            /** Status */
            status: string;
            /**
             * Started At
             * Format: date-time
             */
            started_at: string;
            /** Game Type */
            game_type: string;
            /** Bet Amount */
            bet_amount: number;
        };
        /**
         * GameStats
         * @description 사용자 게임 통계 모델
         */
        GameStats: {
            /** User Id */
            user_id: number;
            /**
             * Total Spins
             * @default 0
             */
            total_spins: number;
            /**
             * Total Coins Won
             * @default 0
             */
            total_coins_won: number;
            /**
             * Total Gems Won
             * @default 0
             */
            total_gems_won: number;
            /**
             * Special Items Won
             * @default 0
             */
            special_items_won: number;
            /**
             * Jackpots Won
             * @default 0
             */
            jackpots_won: number;
            /**
             * Bonus Spins Won
             * @default 0
             */
            bonus_spins_won: number;
            /**
             * Best Streak
             * @default 0
             */
            best_streak: number;
            /**
             * Current Streak
             * @default 0
             */
            current_streak: number;
            /** Last Spin Date */
            last_spin_date?: string | null;
        };
        /** GameTypeStats */
        GameTypeStats: {
            /** Game Type */
            game_type: string;
            /** Play Count */
            play_count: number;
            /** Net Coin */
            net_coin: number;
            /** Net Gem */
            net_gem: number;
            /** Wins */
            wins: number;
            /** Losses */
            losses: number;
            /** Last Played At */
            last_played_at: string | null;
        };
        /** GlobalMetricsResponse */
        GlobalMetricsResponse: {
            /** Online Users */
            online_users: number;
            /** Spins Last Hour */
            spins_last_hour: number;
            /** Big Wins Last Hour */
            big_wins_last_hour: number;
            /**
             * Generated At
             * Format: date-time
             */
            generated_at: string;
        };
        /** GoldGrantRequest */
        GoldGrantRequest: {
            /**
             * Amount
             * @description 지급할 골드 양 (양수)
             */
            amount: number;
            /** Reason */
            reason: string;
            /**
             * Idempotency Key
             * @description 멱등 보장을 위한 클라이언트 키
             */
            idempotency_key?: string | null;
        };
        /** GoldGrantResponse */
        GoldGrantResponse: {
            /** Success */
            success: boolean;
            /** User Id */
            user_id: number;
            /** Granted */
            granted: number;
            /** New Gold Balance */
            new_gold_balance: number;
            /** Reason */
            reason: string;
            /** Receipt Code */
            receipt_code: string;
            /**
             * Idempotent Reuse
             * @default false
             */
            idempotent_reuse: boolean;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HealthResponse */
        HealthResponse: {
            /** Status */
            status: string;
            /**
             * Timestamp
             * Format: date-time
             */
            timestamp: string;
            /** Version */
            version: string;
            /**
             * Redis Connected
             * @description Redis 연결 성공 여부 (lifespan 초기화 시 설정). 테스트 및 관측 목적.
             */
            redis_connected?: boolean | null;
        };
        /** InviteCodeResponse */
        InviteCodeResponse: {
            /** Code */
            code: string;
            /** Expires At */
            expires_at?: string | null;
            /**
             * Max Uses
             * @default 1
             */
            max_uses: number;
            /**
             * Used Count
             * @default 0
             */
            used_count: number;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /**
         * LeaderboardEntry
         * @description 리더보드 항목
         */
        LeaderboardEntry: {
            /** Rank */
            rank: number;
            /** User Id */
            user_id: number;
            /** Nickname */
            nickname: string;
            /** Score */
            score: number;
            /** Avatar Url */
            avatar_url?: string | null;
        };
        /** LegacyLimitedBuyRequest */
        LegacyLimitedBuyRequest: {
            /** User Id */
            user_id: number;
            /** Code */
            code: string;
            /**
             * Quantity
             * @default 1
             */
            quantity: number;
            /**
             * Currency
             * @default USD
             */
            currency: string;
            /** Card Token */
            card_token?: string | null;
            /** Promo Code */
            promo_code?: string | null;
            /**
             * Idempotency Key
             * @description Client-provided idempotency key (unique per purchase attempt)
             */
            idempotency_key?: string | null;
        };
        /** LimitedBuyCompatRequest */
        LimitedBuyCompatRequest: {
            /** User Id */
            user_id: number;
            /**
             * Code
             * @description Limited package code
             */
            code: string;
            /**
             * Quantity
             * @default 1
             */
            quantity: number;
            /**
             * Currency
             * @default USD
             */
            currency: string;
            /** Card Token */
            card_token?: string | null;
            /** Promo Code */
            promo_code?: string | null;
            /**
             * Idempotency Key
             * @description Client-provided idempotency key
             */
            idempotency_key?: string | null;
        };
        /** LimitedBuyReceipt */
        LimitedBuyReceipt: {
            /** Success */
            success: boolean;
            /** Message */
            message: string;
            /** User Id */
            user_id?: number | null;
            /** Code */
            code?: string | null;
            /** Quantity */
            quantity?: number | null;
            /** Total Price Cents */
            total_price_cents?: number | null;
            /** Gold Granted */
            gold_granted?: number | null;
            /** New Gold Balance */
            new_gold_balance?: number | null;
            /** Charge Id */
            charge_id?: string | null;
            /** Receipt Code */
            receipt_code?: string | null;
            /**
             * Reason Code
             * @description 실패 사유 코드 (OUT_OF_STOCK, USER_LIMIT 등)
             */
            reason_code?: string | null;
        };
        /** LimitedBuyRequest */
        LimitedBuyRequest: {
            /**
             * Package Id
             * @description Limited package id/code
             */
            package_id: string;
            /**
             * Quantity
             * @default 1
             */
            quantity: number;
            /**
             * Currency
             * @default USD
             */
            currency: string;
            /** Card Token */
            card_token?: string | null;
            /**
             * Promo Code
             * @description Optional promotion code for discount
             */
            promo_code?: string | null;
            /**
             * Idempotency Key
             * @description Client-provided idempotency key (unique per purchase attempt)
             */
            idempotency_key?: string | null;
        };
        /** LimitedPackageOut */
        LimitedPackageOut: {
            /** Code */
            code: string;
            /**
             * Package Id
             * @description Legacy alias; always equals code
             */
            package_id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Price Cents */
            price_cents: number;
            /**
             * Gold
             * @description 구매 시 부여되는 골드 양 (이전 gems 필드 대체)
             * @default 0
             */
            gold: number;
            /**
             * Start At
             * Format: date-time
             */
            start_at: string;
            /**
             * End At
             * Format: date-time
             */
            end_at: string;
            /** Is Active */
            is_active: boolean;
            /**
             * Per User Limit
             * @default 1
             */
            per_user_limit: number;
            /**
             * Remaining Stock
             * @description None means unlimited
             */
            remaining_stock?: number | null;
            /**
             * User Purchased
             * @default 0
             */
            user_purchased: number;
            /** User Remaining */
            user_remaining?: number | null;
        };
        /** LimitedPerUserLimitRequest */
        LimitedPerUserLimitRequest: {
            /** Code */
            code: string;
            /** Per User Limit */
            per_user_limit: number;
        };
        /** LimitedPeriodRequest */
        LimitedPeriodRequest: {
            /** Code */
            code: string;
            /**
             * Start At
             * Format: date-time
             */
            start_at: string;
            /**
             * End At
             * Format: date-time
             */
            end_at: string;
        };
        /** LimitedPromoRequest */
        LimitedPromoRequest: {
            /** Code */
            code: string;
            /** Promo Code */
            promo_code: string;
            /** Cents Off */
            cents_off: number;
        };
        /** LimitedStockRequest */
        LimitedStockRequest: {
            /** Code */
            code: string;
            /** Initial Stock */
            initial_stock?: number | null;
        };
        /** LimitedToggleRequest */
        LimitedToggleRequest: {
            /** Code */
            code: string;
            /** Active */
            active: boolean;
        };
        /** LimitedUpsertRequest */
        LimitedUpsertRequest: {
            /** Package Id */
            package_id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Price */
            price: number;
            /** Starts At */
            starts_at?: string | null;
            /** Ends At */
            ends_at?: string | null;
            /** Stock Total */
            stock_total?: number | null;
            /** Stock Remaining */
            stock_remaining?: number | null;
            /** Per User Limit */
            per_user_limit?: number | null;
            /** Emergency Disabled */
            emergency_disabled?: boolean | null;
            /** Contents */
            contents?: Record<string, never> | null;
            /** Is Active */
            is_active?: boolean | null;
            /**
             * Gold
             * @description Amount of gold granted (legacy bonus_tokens alias)
             */
            gold?: number | null;
        };
        /** MissionResponse */
        MissionResponse: {
            /** Title */
            title: string;
            /** Description */
            description?: string | null;
            /** Mission Type */
            mission_type: string;
            /** Category */
            category?: string | null;
            /** Target Value */
            target_value: number;
            /** Target Type */
            target_type: string;
            /** Rewards */
            rewards: Record<string, never>;
            /**
             * Requirements
             * @default {}
             */
            requirements: Record<string, never> | null;
            /** Reset Period */
            reset_period?: string | null;
            /** Icon */
            icon?: string | null;
            /** Id */
            id: number;
            /** Is Active */
            is_active: boolean;
            /** Sort Order */
            sort_order: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** User Progress */
            user_progress?: Record<string, never> | null;
        };
        /** MissionTemplateCreate */
        MissionTemplateCreate: {
            /** Title */
            title: string;
            /** Mission Type */
            mission_type: string;
            /**
             * Target
             * @default 1
             */
            target: number;
            /** Reward */
            reward?: Record<string, never>;
        };
        /** MissionTemplateResponse */
        MissionTemplateResponse: {
            /** Title */
            title: string;
            /** Mission Type */
            mission_type: string;
            /**
             * Target
             * @default 1
             */
            target: number;
            /** Reward */
            reward?: Record<string, never>;
            /** Id */
            id: number;
            /** Is Active */
            is_active: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** MissionTemplateUpdate */
        MissionTemplateUpdate: {
            /** Title */
            title?: string | null;
            /** Mission Type */
            mission_type?: string | null;
            /** Target */
            target?: number | null;
            /** Reward */
            reward?: Record<string, never> | null;
        };
        /** PaginatedRewardsResponse */
        PaginatedRewardsResponse: {
            /** Rewards */
            rewards: components["schemas"]["RewardItem"][];
            /** Page */
            page: number;
            /** Page Size */
            page_size: number;
            /** Total Rewards */
            total_rewards: number;
            /** Total Pages */
            total_pages: number;
        };
        /** ProfileAggregateStats */
        ProfileAggregateStats: {
            /** User Id */
            user_id: number;
            /** Total Play Count */
            total_play_count: number;
            /** Total Net Coin */
            total_net_coin: number;
            /** Total Net Gem */
            total_net_gem: number;
            /** Distinct Game Types */
            distinct_game_types: number;
            /** Favorite Game Type */
            favorite_game_type: string | null;
            /** Recent Game Types */
            recent_game_types: string[];
            /** Last Played At */
            last_played_at: string | null;
        };
        /**
         * ProfileGameStats
         * @description 프로필 게임 통계 응답
         */
        ProfileGameStats: {
            /** User Id */
            user_id: number;
            /**
             * Total Games Played
             * @default 0
             */
            total_games_played: number;
            /** Total Time Played */
            total_time_played?: number | null;
            /** Favorite Game */
            favorite_game?: string | null;
            /**
             * Recent Activities
             * @default []
             */
            recent_activities: components["schemas"]["UserGameActivity"][];
            /**
             * Achievements
             * @default []
             */
            achievements: components["schemas"]["Achievement"][];
            current_session?: components["schemas"]["GameSession"] | null;
        };
        /** PromoCodeUpsertRequest */
        PromoCodeUpsertRequest: {
            /** Code */
            code: string;
            /** Package Id */
            package_id?: string | null;
            /**
             * Discount Type
             * @default flat
             */
            discount_type: string;
            /**
             * Value
             * @default 0
             */
            value: number;
            /** Starts At */
            starts_at?: string | null;
            /** Ends At */
            ends_at?: string | null;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean | null;
            /** Max Uses */
            max_uses?: number | null;
        };
        /** ProtectionRequest */
        ProtectionRequest: {
            /** Action Type */
            action_type?: string | null;
            /** Enabled */
            enabled: boolean;
        };
        /** ProtectionStatus */
        ProtectionStatus: {
            /** Action Type */
            action_type: string;
            /** Enabled */
            enabled: boolean;
        };
        /**
         * PublicUserResponse
         * @description 타인 보기용 제한 정보 스키마
         */
        PublicUserResponse: {
            /** Id */
            id: number;
            /** Site Id */
            site_id: string;
            /** Nickname */
            nickname: string;
            /**
             * Phone Number
             * @default hidden
             */
            phone_number: string;
            /**
             * Cyber Token Balance
             * @default 0
             */
            cyber_token_balance: number;
            /** Created At */
            created_at?: string | null;
            /**
             * Is Active
             * @default true
             */
            is_active: boolean;
            /**
             * Is Admin
             * @default false
             */
            is_admin: boolean;
            /**
             * Rank
             * @default STANDARD
             */
            rank: string | null;
        };
        /**
         * RPSPlayRequest
         * @description 가위바위보 게임 요청 모델
         */
        RPSPlayRequest: {
            /** Choice */
            choice: string;
            /** Bet Amount */
            bet_amount: number;
        };
        /**
         * RPSPlayResponse
         * @description 가위바위보 게임 응답 모델
         */
        RPSPlayResponse: {
            /** Success */
            success: boolean;
            /** Player Choice */
            player_choice: string;
            /** Computer Choice */
            computer_choice: string;
            /** Result */
            result: string;
            /**
             * Win Amount
             * @default 0
             */
            win_amount: number;
            /** Message */
            message: string;
            /** Balance */
            balance: number;
            /** Streak */
            streak?: number | null;
        };
        /**
         * RefreshTokenRequest
         * @description 리프레시 토큰 요청
         */
        RefreshTokenRequest: {
            /** Refresh Token */
            refresh_token: string;
        };
        /** ResetRequest */
        ResetRequest: {
            /** Action Type */
            action_type?: string | null;
        };
        /** RewardAuditItem */
        RewardAuditItem: {
            /** Id */
            id: number;
            /** User Id */
            user_id?: number | null;
            /** Reward Type */
            reward_type: string;
            /** Amount */
            amount: number;
            /** Source */
            source?: string | null;
            /** Event Id */
            event_id?: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** RewardAuditResponse */
        RewardAuditResponse: {
            /** Items */
            items: components["schemas"]["RewardAuditItem"][];
            /** Total */
            total: number;
            /** Page */
            page: number;
            /** Page Size */
            page_size: number;
        };
        /** RewardCatalogCreate */
        RewardCatalogCreate: {
            /** Code */
            code: string;
            /** Reward Type */
            reward_type: string;
            /** Amount */
            amount: number;
            /** Meta */
            meta?: Record<string, never> | null;
        };
        /** RewardCatalogItem */
        RewardCatalogItem: {
            /** Code */
            code: string;
            /** Reward Type */
            reward_type: string;
            /** Amount */
            amount: number;
            /** Meta */
            meta?: Record<string, never> | null;
            /** Id */
            id: number;
            /** Active */
            active: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** RewardCatalogUpdate */
        RewardCatalogUpdate: {
            /** Reward Type */
            reward_type?: string | null;
            /** Amount */
            amount?: number | null;
            /** Meta */
            meta?: Record<string, never> | null;
        };
        /** RewardDistributionRequest */
        RewardDistributionRequest: {
            /** User Id */
            user_id: number;
            /** Reward Type */
            reward_type: string;
            /** Amount */
            amount: number;
            /** Source Description */
            source_description: string;
            /** Idempotency Key */
            idempotency_key?: string | null;
            /** Metadata */
            metadata?: Record<string, never> | null;
        };
        /** RewardItem */
        RewardItem: {
            /** Reward Id */
            reward_id: number;
            /** Reward Type */
            reward_type: string;
            /** Reward Value */
            reward_value: string;
            /**
             * Awarded At
             * Format: date-time
             */
            awarded_at: string;
        };
        /** ShopProductCreate */
        ShopProductCreate: {
            /** Product Id */
            product_id: string;
            /** Name */
            name: string;
            /** Price */
            price: number;
            /** Description */
            description?: string | null;
            /** Extra */
            extra?: Record<string, never> | null;
        };
        /** ShopProductUpdate */
        ShopProductUpdate: {
            /** Name */
            name?: string | null;
            /** Price */
            price?: number | null;
            /** Description */
            description?: string | null;
            /** Is Active */
            is_active?: boolean | null;
            /** Extra */
            extra?: Record<string, never> | null;
        };
        /** ShopPurchaseRequest */
        ShopPurchaseRequest: {
            /** User Id */
            user_id: number;
            /** Item Id */
            item_id: number;
            /** Item Name */
            item_name: string;
            /** Price */
            price: number;
            /** Description */
            description?: string | null;
        };
        /** ShopPurchaseResponse */
        ShopPurchaseResponse: {
            /** Success */
            success: boolean;
            /** Message */
            message: string;
            /** New Gold Balance */
            new_gold_balance: number;
            /** Item Id */
            item_id: number;
            /** Item Name */
            item_name: string;
            /** New Item Count */
            new_item_count: number;
        };
        /**
         * SlotSpinRequest
         * @description 슬롯 머신 스핀 요청 모델
         */
        SlotSpinRequest: {
            /** Bet Amount */
            bet_amount: number;
            /**
             * Lines
             * @default 1
             */
            lines: number;
        };
        /**
         * SlotSpinResponse
         * @description 슬롯 머신 스핀 응답 모델
         */
        SlotSpinResponse: {
            /** Success */
            success: boolean;
            /** Reels */
            reels: string[][];
            /**
             * Win Amount
             * @default 0
             */
            win_amount: number;
            /**
             * Win Lines
             * @default []
             */
            win_lines: Record<string, never>[];
            /**
             * Multiplier
             * @default 1
             */
            multiplier: number;
            /**
             * Is Jackpot
             * @default false
             */
            is_jackpot: boolean;
            /**
             * Free Spins Awarded
             * @default 0
             */
            free_spins_awarded: number;
            /** Message */
            message: string;
            /** Balance */
            balance: number;
            /** Special Animation */
            special_animation?: string | null;
            /** Feedback */
            feedback?: Record<string, never> | null;
            /**
             * Net Change
             * @description 순 변화량 (win_amount - bet_amount)
             */
            net_change?: number | null;
        };
        /** StreakClaimResponse */
        StreakClaimResponse: {
            /** Action Type */
            action_type: string;
            /** Streak Count */
            streak_count: number;
            /** Awarded Gold */
            awarded_gold: number;
            /** Awarded Xp */
            awarded_xp: number;
            /** New Gold Balance */
            new_gold_balance: number;
            /**
             * Claimed At
             * Format: date-time
             */
            claimed_at: string;
        };
        /** StreakPreviewResponse */
        StreakPreviewResponse: {
            /** Action Type */
            action_type: string;
            /** Streak Count */
            streak_count: number;
            /** Claimed Today */
            claimed_today: boolean;
            /** Claimable */
            claimable: boolean;
            /** Today Reward Gold */
            today_reward_gold: number;
            /** Today Reward Xp */
            today_reward_xp: number;
            /** Next Day Reward Gold */
            next_day_reward_gold: number;
            /** Next Day Reward Xp */
            next_day_reward_xp: number;
        };
        /** StreakStatus */
        StreakStatus: {
            /** Action Type */
            action_type: string;
            /** Count */
            count: number;
            /** Ttl Seconds */
            ttl_seconds?: number | null;
            /** Next Reward */
            next_reward?: string | null;
        };
        /** TickRequest */
        TickRequest: {
            /** Action Type */
            action_type?: string | null;
        };
        /**
         * Token
         * @description 토큰 응답 스키마
         */
        Token: {
            /** Access Token */
            access_token: string;
            /**
             * Token Type
             * @default bearer
             */
            token_type: string;
            user: components["schemas"]["app__schemas__auth__UserResponse"];
            /** Refresh Token */
            refresh_token?: string | null;
        };
        /** UpdateUserRankRequest */
        UpdateUserRankRequest: {
            /**
             * User Rank
             * @description STANDARD|VIP 등
             */
            user_rank: string;
        };
        /** UpdateUserStatusRequest */
        UpdateUserStatusRequest: {
            /** Is Active */
            is_active: boolean;
        };
        /**
         * UserBanRequest
         * @description User ban request
         */
        UserBanRequest: {
            /** User Id */
            user_id: number;
            /** Reason */
            reason: string;
            /** Duration Hours */
            duration_hours?: number | null;
        };
        /**
         * UserCreate
         * @description 사용자 생성 스키마 - 회원가입 필수 입력사항
         * @example {
         *       "invite_code": "5858",
         *       "nickname": "테스터",
         *       "password": "1234",
         *       "phone_number": "01012345678",
         *       "site_id": "testuser123"
         *     }
         */
        UserCreate: {
            /**
             * Site Id
             * @description 사이트 아이디
             */
            site_id: string;
            /**
             * Nickname
             * @description 닉네임
             */
            nickname: string;
            /**
             * Phone Number
             * @description 전화번호
             */
            phone_number: string;
            /**
             * Invite Code
             * @description 초대코드 (5858)
             */
            invite_code: string;
            /**
             * Password
             * @description 비밀번호생성
             */
            password: string;
        };
        /** UserDetail */
        UserDetail: {
            /** Id */
            id: number;
            /** Site Id */
            site_id: string;
            /** Nickname */
            nickname: string;
            /** Phone Number */
            phone_number?: string | null;
            /** Is Active */
            is_active: boolean;
            /** Is Admin */
            is_admin: boolean;
            /** User Rank */
            user_rank?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Cyber Token Balance */
            cyber_token_balance: number;
            /** Last Login */
            last_login?: string | null;
        };
        /**
         * UserGameActivity
         * @description 사용자 게임 활동 요약
         */
        UserGameActivity: {
            /** Game Type */
            game_type: string;
            /**
             * Total Rounds
             * @default 0
             */
            total_rounds: number;
            /**
             * Total Wins
             * @default 0
             */
            total_wins: number;
            /**
             * Total Losses
             * @default 0
             */
            total_losses: number;
            /**
             * Win Rate
             * @default 0
             */
            win_rate: number;
            /**
             * Favorite
             * @default false
             */
            favorite: boolean;
            /** Last Played */
            last_played?: string | null;
        };
        /**
         * UserLogin
         * @description 사용자 로그인 스키마
         * @example {
         *       "password": "password123",
         *       "site_id": "testuser123"
         *     }
         */
        UserLogin: {
            /**
             * Site Id
             * @description 사이트 아이디
             */
            site_id: string;
            /**
             * Password
             * @description 비밀번호
             */
            password: string;
        };
        /** UserMissionProgress */
        UserMissionProgress: {
            /** Mission Id */
            mission_id: number;
            /** Progress Increment */
            progress_increment: number;
        };
        /** UserMissionResponse */
        UserMissionResponse: {
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            /** Mission Id */
            mission_id: number;
            /** Current Progress */
            current_progress: number;
            /** Completed */
            completed: boolean;
            /** Claimed */
            claimed: boolean;
            /**
             * Started At
             * Format: date-time
             */
            started_at: string;
            /** Completed At */
            completed_at?: string | null;
            /** Claimed At */
            claimed_at?: string | null;
            /** Reset At */
            reset_at?: string | null;
            mission?: components["schemas"]["MissionResponse"] | null;
        };
        /**
         * UserProfileResponse
         * @description User profile response
         */
        UserProfileResponse: {
            /** Id */
            id: number;
            /** Site Id */
            site_id: string;
            /** Nickname */
            nickname: string;
            /** Phone Number */
            phone_number: string;
            /** Cyber Token Balance */
            cyber_token_balance: number;
            /** Is Admin */
            is_admin: boolean;
            /** Is Active */
            is_active: boolean;
        };
        /**
         * UserStatsResponse
         * @description User statistics response
         *
         *     Notes:
         *     - last_30d_active_days / lifetime_active_days are computed from UserAction distinct UTC dates.
         *     - Timezone: UTC 00:00 day boundary.
         *     - Activity scope: all actions recorded in UserAction.
         */
        UserStatsResponse: {
            /** Total Games Played */
            total_games_played: number;
            /** Total Tokens Earned */
            total_tokens_earned: number;
            /** Total Tokens Spent */
            total_tokens_spent: number;
            /** Win Rate */
            win_rate: number;
            /** Level */
            level: number;
            /** Experience */
            experience: number;
            /** Last 30D Active Days */
            last_30d_active_days: number;
            /** Lifetime Active Days */
            lifetime_active_days: number;
        };
        /** UserSummary */
        UserSummary: {
            /** Id */
            id: number;
            /** Site Id */
            site_id: string;
            /** Nickname */
            nickname: string;
            /** Phone Number */
            phone_number?: string | null;
            /** Is Active */
            is_active: boolean;
            /** Is Admin */
            is_admin: boolean;
            /** User Rank */
            user_rank?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** UserUpdate */
        UserUpdate: {
            /** Nickname */
            nickname?: string | null;
            /** Phone Number */
            phone_number?: string | null;
            /** Password */
            password?: string | null;
            /** Rank */
            rank?: string | null;
        };
        /** ValidateInviteCodeRequest */
        ValidateInviteCodeRequest: {
            /** Code */
            code: string;
        };
        /** ValidateInviteCodeResponse */
        ValidateInviteCodeResponse: {
            /** Is Valid */
            is_valid: boolean;
            /** Error Message */
            error_message?: string | null;
            /** Code */
            code?: string | null;
            /** Expires At */
            expires_at?: string | null;
            /** Remaining Uses */
            remaining_uses?: number | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** VipClaimResponse */
        VipClaimResponse: {
            /** Awarded Points */
            awarded_points: number;
            /** New Vip Points */
            new_vip_points: number;
            /**
             * Claimed At
             * Format: date-time
             */
            claimed_at: string;
            /** Idempotent */
            idempotent: boolean;
        };
        /** VipStatusResponse */
        VipStatusResponse: {
            /** Claimed Today */
            claimed_today: boolean;
            /** Vip Points */
            vip_points: number;
            /** Last Claim At */
            last_claim_at?: string | null;
        };
        /** _RegisterRequest */
        _RegisterRequest: {
            /**
             * Invite Code
             * @description Invite code
             */
            invite_code: string;
            /**
             * Nickname
             * @description Desired nickname
             */
            nickname: string;
        };
        /** _RegisterResponse */
        _RegisterResponse: {
            /** User Id */
            user_id: number;
            /** Nickname */
            nickname: string;
            /** Access Token */
            access_token: string;
            /** Refresh Token */
            refresh_token?: string | null;
            /** Gold Balance */
            gold_balance?: number | null;
        };
        /** EventCreate */
        app__routers__admin_content__EventCreate: {
            /** Name */
            name: string;
            /**
             * Start At
             * Format: date-time
             */
            start_at: string;
            /**
             * End At
             * Format: date-time
             */
            end_at: string;
            /** Reward Scheme */
            reward_scheme?: Record<string, never>;
        };
        /** EventResponse */
        app__routers__admin_content__EventResponse: {
            /** Name */
            name: string;
            /**
             * Start At
             * Format: date-time
             */
            start_at: string;
            /**
             * End At
             * Format: date-time
             */
            end_at: string;
            /** Reward Scheme */
            reward_scheme?: Record<string, never>;
            /** Id */
            id: number;
            /** Is Active */
            is_active: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** EventUpdate */
        app__routers__admin_content__EventUpdate: {
            /** Name */
            name?: string | null;
            /** Start At */
            start_at?: string | null;
            /** End At */
            end_at?: string | null;
            /** Reward Scheme */
            reward_scheme?: Record<string, never> | null;
            /** Missions */
            missions?: number[] | null;
        };
        /**
         * UserResponse
         * @description 사용자 응답 스키마
         */
        app__schemas__auth__UserResponse: {
            /** Id */
            id: number;
            /** Site Id */
            site_id: string;
            /** Nickname */
            nickname: string;
            /** Phone Number */
            phone_number: string;
            /** Is Active */
            is_active: boolean;
            /** Is Admin */
            is_admin: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Last Login */
            last_login?: string | null;
            /**
             * Gold Balance
             * @default 0
             */
            gold_balance: number;
            /**
             * Vip Points
             * @default 0
             */
            vip_points: number;
            /**
             * Battlepass Level
             * @default 1
             */
            battlepass_level: number;
            /**
             * Experience
             * @default 0
             */
            experience: number;
            /**
             * Max Experience
             * @default 1000
             */
            max_experience: number;
        };
        /** EventCreate */
        app__schemas__event_schemas__EventCreate: {
            /** Title */
            title: string;
            /** Description */
            description?: string | null;
            /** Event Type */
            event_type: string;
            /**
             * Start Date
             * Format: date-time
             */
            start_date: string;
            /**
             * End Date
             * Format: date-time
             */
            end_date: string;
            /** Rewards */
            rewards: Record<string, never>;
            /**
             * Requirements
             * @default {}
             */
            requirements: Record<string, never> | null;
            /** Image Url */
            image_url?: string | null;
            /**
             * Priority
             * @default 0
             */
            priority: number;
        };
        /** EventResponse */
        app__schemas__event_schemas__EventResponse: {
            /** Title */
            title: string;
            /** Description */
            description?: string | null;
            /** Event Type */
            event_type: string;
            /**
             * Start Date
             * Format: date-time
             */
            start_date: string;
            /**
             * End Date
             * Format: date-time
             */
            end_date: string;
            /** Rewards */
            rewards: Record<string, never>;
            /**
             * Requirements
             * @default {}
             */
            requirements: Record<string, never> | null;
            /** Image Url */
            image_url?: string | null;
            /**
             * Priority
             * @default 0
             */
            priority: number;
            /** Id */
            id: number;
            /** Is Active */
            is_active: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Participation Count
             * @default 0
             */
            participation_count: number | null;
            /** User Participation */
            user_participation?: Record<string, never> | null;
        };
        /** EventUpdate */
        app__schemas__event_schemas__EventUpdate: {
            /** Title */
            title?: string | null;
            /** Description */
            description?: string | null;
            /** End Date */
            end_date?: string | null;
            /** Rewards */
            rewards?: Record<string, never> | null;
            /** Is Active */
            is_active?: boolean | null;
        };
        /** UserResponse */
        app__schemas__user__UserResponse: {
            /** Id */
            id: number;
            /** Site Id */
            site_id: string;
            /** Nickname */
            nickname: string;
            /** Phone Number */
            phone_number: string;
            /** Cyber Token Balance */
            cyber_token_balance: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Is Active */
            is_active: boolean;
            /** Is Admin */
            is_admin: boolean;
            /**
             * Rank
             * @default STANDARD
             */
            rank: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    minimal_register_api_auth_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["_RegisterRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_RegisterResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    minimal_profile_api_auth_profile_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__schemas__auth__UserResponse"];
                };
            };
        };
    };
    debug_token_api_auth_debug_token_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    debug_decode_api_auth_debug_decode_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    debug_signature_api_auth_debug_sig_get: {
        parameters: {
            query?: {
                token?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    debug_make_token_api_auth_debug_make_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    debug_signature_guess_api_auth_debug_sig_guess_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    debug_verify_api_auth_debug_verify_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    signup_api_auth_signup_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_api_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserLogin"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_login_api_auth_admin_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminLogin"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_api_auth_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["Body_refresh_api_auth_refresh_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Token"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logout_api_auth_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RefreshTokenRequest"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logout_all_api_auth_logout_all_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    me_api_auth_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__schemas__auth__UserResponse"];
                };
            };
        };
    };
    get_profile_api_users_profile_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__schemas__user__UserResponse"];
                };
            };
        };
    };
    update_user_profile_api_users_profile_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_balance_api_users_balance_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_user_info_api_users_info_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_user_stats_api_users_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserStatsResponse"];
                };
            };
        };
    };
    add_tokens_api_users_tokens_add_post: {
        parameters: {
            query: {
                amount: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_api_users__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__schemas__user__UserResponse"] | components["schemas"]["PublicUserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_email_trigger_api_admin_email_trigger_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminEmailTriggerRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_list_users_api_admin_users_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                search?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSummary"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_user_detail_api_admin_users__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDetail"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_update_user_api_admin_users__user_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminUserUpdateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_delete_user_api_admin_users__user_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    dev_elevate_user_api_admin_users_elevate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ElevateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_update_rank_api_admin_users__user_id__rank_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserRankRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_update_status_api_admin_users__user_id__status_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserStatusRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_user_logs_api_admin_users__user_id__logs_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminLogResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_audit_logs_api_admin_audit_logs_get: {
        parameters: {
            query?: {
                action?: string | null;
                target_type?: string | null;
                target_id?: string | null;
                since?: string | null;
                until?: string | null;
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    export_audit_logs_csv_api_admin_audit_logs_csv_get: {
        parameters: {
            query?: {
                action?: string | null;
                target_type?: string | null;
                target_id?: string | null;
                since?: string | null;
                until?: string | null;
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_list_items_api_admin_shop_items_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminCatalogItemOut"][];
                };
            };
        };
    };
    admin_create_item_api_admin_shop_items_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminCatalogItemIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminCatalogItemOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_update_item_api_admin_shop_items__item_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminCatalogItemIn"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminCatalogItemOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_delete_item_api_admin_shop_items__item_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_set_discount_api_admin_shop_items__item_id__discount_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminDiscountPatch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminCatalogItemOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_set_rank_api_admin_shop_items__item_id__rank_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                item_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdminRankPatch"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminCatalogItemOut"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_admin_stats_api_admin_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminStatsResponse"];
                };
            };
        };
    };
    ban_user_api_admin_users__user_id__ban_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserBanRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unban_user_api_admin_users__user_id__unban_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_user_tokens_api_admin_users__user_id__tokens_add_post: {
        parameters: {
            query?: {
                amount?: number | null;
            };
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AdminAddTokensRequest"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_limited_toggle_api_admin_limited_toggle_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LimitedToggleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_update_gacha_config_api_admin_gacha_config_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GachaConfigUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_campaign_api_admin_campaigns_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CampaignCreateRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_campaign_api_admin_campaigns__campaign_id__cancel_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                campaign_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_list_transactions_api_admin_transactions_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_force_settle_api_admin_transactions__receipt__force_settle_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                receipt: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ForceSettleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_limited_upsert_api_admin_limited_packages_upsert_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LimitedUpsertRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_limited_disable_api_admin_limited_packages__package_id__disable_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                package_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_promo_upsert_api_admin_promo_codes_upsert_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromoCodeUpsertRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_limited_period_api_admin_limited_period_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LimitedPeriodRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_limited_stock_api_admin_limited_stock_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LimitedStockRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_limited_per_user_limit_api_admin_limited_per_user_limit_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LimitedPerUserLimitRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_limited_promo_set_api_admin_limited_promo_set_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LimitedPromoRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_limited_promo_clear_api_admin_limited_promo_clear_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LimitedPromoRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_grant_gold_api_admin_users__user_id__gold_grant_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GoldGrantRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoldGrantResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    olap_health_api_olap_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    log_action_api_actions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ActionCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionLoggedResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    log_actions_bulk_api_actions_bulk_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkActions"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    recent_actions_api_actions_recent__user_id__get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ActionItem"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_rewards_api_rewards_users__user_id__rewards_get: {
        parameters: {
            query?: {
                /** @description Page number, 1-indexed */
                page?: number;
                /** @description Number of items per page */
                page_size?: number;
            };
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRewardsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    distribute_reward_to_user_api_rewards_distribute_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RewardDistributionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardItem"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_catalog_api_shop_catalog_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CatalogItem"][];
                };
            };
        };
    };
    admin_list_products_api_shop_admin_products_get: {
        parameters: {
            query?: {
                include_deleted?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_create_product_api_shop_admin_products_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShopProductCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShopProductCreate"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_update_product_api_shop_admin_products__product_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                product_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShopProductUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_soft_delete_product_api_shop_admin_products__product_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                product_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    admin_restore_product_api_shop_admin_products__product_id__restore_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                product_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_limited_packages_api_shop_limited_packages_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LimitedPackageOut"][];
                };
            };
        };
    };
    list_limited_catalog_api_shop_limited_catalog_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LimitedPackageOut"][];
                };
            };
        };
    };
    compat_buy_limited_package_legacy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LegacyLimitedBuyRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LimitedBuyReceipt"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    payment_webhook_api_shop_webhook_payment_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    purchase_shop_item_api_shop_purchase_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShopPurchaseRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShopPurchaseResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    buy_api_shop_buy_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BuyRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BuyReceipt"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_my_transactions_api_shop_transactions_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    settle_my_transaction_api_shop_transactions__receipt__settle_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                receipt: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    buy_limited_package: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LimitedBuyRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LimitedBuyReceipt"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_missions_api_missions__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    claim_mission_reward_api_missions__mission_id__claim_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mission_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_main_dashboard_api_dashboard_main_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_games_dashboard_api_dashboard_games_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_social_proof_api_dashboard_social_proof_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_unified_dashboard_api_dashboard_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    status_api_streak_status_get: {
        parameters: {
            query?: {
                action_type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StreakStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    tick_api_streak_tick_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TickRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StreakStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reset_api_streak_reset_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    next_reward_api_streak_next_reward_get: {
        parameters: {
            query?: {
                action_type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    history_api_streak_history_get: {
        parameters: {
            query: {
                action_type?: string;
                year: number;
                month: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AttendanceHistory"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    protection_status_api_streak_protection_get: {
        parameters: {
            query?: {
                action_type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProtectionStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    set_protection_api_streak_protection_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProtectionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProtectionStatus"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    preview_api_streak_preview_get: {
        parameters: {
            query?: {
                action_type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StreakPreviewResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    claim_api_streak_claim_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ClaimRequest"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StreakClaimResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    vip_status_api_vip_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VipStatusResponse"];
                };
            };
        };
    };
    claim_vip_daily_api_vip_claim_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VipClaimResponse"];
                };
            };
        };
    };
    get_notification_settings_anon_api_notification_settings_anon_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_events_api_admin_content_events_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__routers__admin_content__EventResponse"][];
                };
            };
        };
    };
    create_event_api_admin_content_events_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["app__routers__admin_content__EventCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__routers__admin_content__EventResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_event_api_admin_content_events__event_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__routers__admin_content__EventResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_event_api_admin_content_events__event_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["app__routers__admin_content__EventUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__routers__admin_content__EventResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_event_api_admin_content_events__event_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    activate_event_api_admin_content_events__event_id__activate_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deactivate_event_api_admin_content_events__event_id__deactivate_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_mission_templates_api_admin_content_missions_templates_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissionTemplateResponse"][];
                };
            };
        };
    };
    create_mission_template_api_admin_content_missions_templates_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MissionTemplateCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissionTemplateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_mission_template_api_admin_content_missions_templates__template_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                template_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MissionTemplateUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissionTemplateResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_mission_template_api_admin_content_missions_templates__template_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                template_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_reward_catalog_api_admin_content_rewards_catalog_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardCatalogItem"][];
                };
            };
        };
    };
    create_reward_catalog_api_admin_content_rewards_catalog_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RewardCatalogCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardCatalogItem"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_reward_catalog_api_admin_content_rewards_catalog__reward_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reward_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RewardCatalogUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardCatalogItem"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_reward_catalog_api_admin_content_rewards_catalog__reward_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reward_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    activate_reward_api_admin_content_rewards_catalog__reward_id__activate_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reward_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deactivate_reward_api_admin_content_rewards_catalog__reward_id__deactivate_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reward_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reward_audit_api_admin_content_rewards_audit_get: {
        parameters: {
            query?: {
                user_id?: number | null;
                event_id?: number | null;
                source?: string | null;
                page?: number;
                page_size?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardAuditResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_events_api_admin_events__get: {
        parameters: {
            query?: {
                include_inactive?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__schemas__event_schemas__EventResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_event_api_admin_events__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["app__schemas__event_schemas__EventCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__schemas__event_schemas__EventResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_event_api_admin_events__event_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["app__schemas__event_schemas__EventUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__schemas__event_schemas__EventResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deactivate_event_api_admin_events__event_id__deactivate_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__schemas__event_schemas__EventResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_participations_api_admin_events__event_id__participations_get: {
        parameters: {
            query?: {
                completed?: boolean | null;
                claimed?: boolean | null;
            };
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventParticipationResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    force_claim_api_admin_events__event_id__force_claim__user_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClaimRewardResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    seed_model_index_event_api_admin_events_seed_model_index_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__schemas__event_schemas__EventResponse"];
                };
            };
        };
    };
    get_docs_titles_api_doc_titles_docs_titles_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown[];
                };
            };
        };
    };
    get_emotion_based_feedback_endpoint_feedback_emotion_based_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmotionFeedbackRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeedbackResponse"] | null;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    generate_feedback_feedback_generate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_achievements_api_games_achievements_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AchievementProgressResponse"];
                };
            };
        };
    };
    my_achievements_api_games_achievements_my_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AchievementProgressResponse"];
                };
            };
        };
    };
    get_basic_stats_api_games_stats_basic_get: {
        parameters: {
            query?: {
                game_type?: string | null;
                /** @description True=자신의 통계, False=전체(관리자 필요) */
                user_scope?: boolean | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameBasicStatsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    start_game_session_api_games_session_start_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GameSessionStart"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameSessionStartResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    recalc_user_game_stats_api_games_stats_recalculate__user_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    end_game_session_api_games_session_end_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GameSessionEnd"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameSessionEndResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_active_session_api_games_session_active_get: {
        parameters: {
            query?: {
                game_type?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameSession"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_gacha_config_api_games_gacha_config_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_gacha_stats_api_games_gacha_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_games_list_api_games__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    spin_slot_api_games_slot_spin_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SlotSpinRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SlotSpinResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    play_rps_api_games_rps_play_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RPSPlayRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RPSPlayResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    pull_gacha_api_games_gacha_pull_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GachaPullRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GachaPullResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    place_crash_bet_api_games_crash_bet_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CrashBetRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CrashBetResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_game_stats_api_games_stats__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameStats"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_my_authoritative_game_stats_api_games_stats_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_profile_game_stats_api_games_profile__user_id__stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileGameStats"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_game_leaderboard_api_games_leaderboard_get: {
        parameters: {
            query?: {
                game_type?: string | null;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameLeaderboard"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_user_achievements_api_games_achievements__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Achievement"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_game_history_api_games_history_get: {
        parameters: {
            query?: {
                game_type?: string | null;
                action_type?: string | null;
                since?: string | null;
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameHistoryListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_game_type_stats_api_games__game_type__stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                game_type: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameTypeStats"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_profile_stats_api_games_profile_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProfileAggregateStats"];
                };
            };
        };
    };
    follow_user_api_games_follow__target_user_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target_user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FollowActionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unfollow_user_api_games_follow__target_user_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                target_user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FollowActionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_following_api_games_follow_list_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FollowListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_followers_api_games_follow_followers_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FollowListResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_invite_code_api_invite_generate_post: {
        parameters: {
            query?: {
                expires_in_days?: number;
                max_uses?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InviteCodeResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_invite_code_api_invite_validate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ValidateInviteCodeRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidateInviteCodeResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_invite_codes_api_invite_codes_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InviteCodeResponse"][];
                };
            };
        };
    };
    deactivate_invite_code_api_invite_codes__code__deactivate_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_invite_stats_api_invite_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    premium_only_api_rbac_premium_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    vip_only_api_rbac_vip_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    get_global_metrics_api_metrics_global_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GlobalMetricsResponse"];
                };
            };
        };
    };
    stream_global_metrics_api_metrics_stream_get: {
        parameters: {
            query?: {
                interval?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_list_active: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__schemas__event_schemas__EventResponse"][];
                };
            };
        };
    };
    events_admin_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventAdminCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__schemas__event_schemas__EventResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_admin_list: {
        parameters: {
            query?: {
                include_deleted?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__schemas__event_schemas__EventResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_admin_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventAdminUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__schemas__event_schemas__EventResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_admin_soft_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_admin_restore: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_get_detail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__schemas__event_schemas__EventResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_join: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventJoin"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventParticipationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_progress_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EventProgressUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventParticipationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    events_claim: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                event_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClaimRewardResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    missions_list_daily: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserMissionResponse"][];
                };
            };
        };
    };
    missions_list_weekly: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserMissionResponse"][];
                };
            };
        };
    };
    missions_list_all: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserMissionResponse"][];
                };
            };
        };
    };
    missions_progress_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserMissionProgress"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    missions_claim: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mission_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClaimRewardResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    test_broadcast_api_realtime_test_broadcast_get: {
        parameters: {
            query: {
                user_id: number;
                event_type?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
    kafka_last_messages_api_kafka__debug_last_get: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    kafka_ready_api_kafka__debug_ready_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    api_info_api_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
