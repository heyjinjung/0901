name: Frontend E2E (Playwright)
on:
  pull_request:
    branches: [ main ]

jobs:
  e2e:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install frontend deps
        working-directory: cc-webapp/frontend
        run: npm ci || npm i
      - name: Install Playwright Browsers
        working-directory: cc-webapp/frontend
        run: npx playwright install --with-deps chromium
      - name: Start stack
        run: |
          docker compose -f docker-compose.yml -f docker-compose.override.yml up -d
      - name: Wait for services
        run: |
          for i in {1..60}; do curl -fsS http://localhost:8000/health && break || sleep 2; done
          for i in {1..60}; do curl -fsS http://localhost:3000/ || sleep 2; done
      - name: Probe backend capabilities and export E2E flags
        env:
          API_BASE_URL: http://localhost:8000
          E2E_INVITE_CODE: ${{ vars.E2E_INVITE_CODE || '5858' }}
        run: |
          node -e "(async()=>{try{const api=process.env.API_BASE_URL||'http://localhost:8000';const nickname='ci_'+Math.random().toString(36).slice(2,8);const reg=await fetch(api+'/api/auth/register',{method:'POST',headers:{'content-type':'application/json'},body:JSON.stringify({nickname,invite_code:process.env.E2E_INVITE_CODE||'5858'})});if(!reg.ok){process.exit(0)}const j=await reg.json();const access=j?.access_token;if(!access){process.exit(0)}const headers={Authorization:'Bearer '+access};const out={};try{const s=await fetch(api+'/api/games/stats/me',{headers});if(s.ok){try{const body=await s.json();if(body&&typeof body==='object'){out.E2E_PARITY_READY='1'}}catch{}}}catch{}try{const c=await fetch(api+'/api/shop/catalog',{headers});if(c.ok){try{const cat=await c.json();const items=Array.isArray(cat?.items)?cat.items:(Array.isArray(cat)?cat:[]);if(items.length>0){out.E2E_SHOP_SYNC='1'}}catch{}}}catch{}try{const r=await fetch(api+'/api/test/realtime/emit/stats_update',{method:'POST',headers:{...headers,'content-type':'application/json'},body:JSON.stringify({stats:{ping:1}})});if(r.status>=200&&r.status<300){out.E2E_REALTIME_MAPPING='1'}}catch{}for(const[k,v]of Object.entries(out)){console.log(`${k}=${v}`)}process.exit(0)}catch{process.exit(0)}})();" >> $GITHUB_ENV
      - name: Run Playwright tests
        working-directory: cc-webapp/frontend
        env:
          E2E_REQUIRE_STATS_PARITY: ${{ vars.E2E_REQUIRE_STATS_PARITY || '0' }}
          E2E_SHOP_SYNC: ${{ vars.E2E_SHOP_SYNC || '0' }}
          E2E_REQUIRE_SHOP_SYNC: ${{ vars.E2E_REQUIRE_SHOP_SYNC || '0' }}
          E2E_REALTIME_MAPPING: ${{ vars.E2E_REALTIME_MAPPING || '0' }}
          E2E_REALTIME_DEDUPE: ${{ vars.E2E_REALTIME_DEDUPE || '0' }}
          E2E_REQUIRE_REALTIME: ${{ vars.E2E_REQUIRE_REALTIME || '0' }}
        run: npx playwright test --reporter=list
      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: cc-webapp/frontend/test-results/playwright-report
      - name: Teardown
        if: always()
        run: docker compose down -v
